// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: nhasset.go

package types

import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *NHAsset) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *NHAsset) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"id":`)

	{

		obj, err = j.ID.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"nh_asset_creator":`)

	{

		obj, err = j.NhAssetCreator.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"nh_asset_owner":`)

	{

		obj, err = j.NhAssetOwner.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"nh_asset_active":`)

	{

		obj, err = j.NhAssetActive.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"dealership":`)

	{

		obj, err = j.Dealership.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"asset_qualifier":`)
	fflib.WriteJsonString(buf, string(j.AssetQualifier))
	buf.WriteString(`,"world_view":`)
	fflib.WriteJsonString(buf, string(j.WorldView))
	buf.WriteString(`,"base_describe":`)
	fflib.WriteJsonString(buf, string(j.BaseDescribe))
	/* Falling back. type=types.NHAssetMapType kind=map */
	buf.WriteString(`,"parent":`)
	err = buf.Encode(j.Parent)
	if err != nil {
		return err
	}
	/* Falling back. type=types.NHAssetMapType kind=map */
	buf.WriteString(`,"child":`)
	err = buf.Encode(j.Child)
	if err != nil {
		return err
	}
	buf.WriteString(`,"create_time":`)

	{

		obj, err = j.CreateTime.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"limit_list":`)
	if j.LimitList != nil {
		buf.WriteString(`[`)
		for i, v := range j.LimitList {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				obj, err = v.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtNHAssetbase = iota
	ffjtNHAssetnosuchkey

	ffjtNHAssetID

	ffjtNHAssetNhAssetCreator

	ffjtNHAssetNhAssetOwner

	ffjtNHAssetNhAssetActive

	ffjtNHAssetDealership

	ffjtNHAssetAssetQualifier

	ffjtNHAssetWorldView

	ffjtNHAssetBaseDescribe

	ffjtNHAssetParent

	ffjtNHAssetChild

	ffjtNHAssetCreateTime

	ffjtNHAssetLimitList
)

var ffjKeyNHAssetID = []byte("id")

var ffjKeyNHAssetNhAssetCreator = []byte("nh_asset_creator")

var ffjKeyNHAssetNhAssetOwner = []byte("nh_asset_owner")

var ffjKeyNHAssetNhAssetActive = []byte("nh_asset_active")

var ffjKeyNHAssetDealership = []byte("dealership")

var ffjKeyNHAssetAssetQualifier = []byte("asset_qualifier")

var ffjKeyNHAssetWorldView = []byte("world_view")

var ffjKeyNHAssetBaseDescribe = []byte("base_describe")

var ffjKeyNHAssetParent = []byte("parent")

var ffjKeyNHAssetChild = []byte("child")

var ffjKeyNHAssetCreateTime = []byte("create_time")

var ffjKeyNHAssetLimitList = []byte("limit_list")

// UnmarshalJSON umarshall json - template of ffjson
func (j *NHAsset) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *NHAsset) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtNHAssetbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtNHAssetnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyNHAssetAssetQualifier, kn) {
						currentKey = ffjtNHAssetAssetQualifier
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'b':

					if bytes.Equal(ffjKeyNHAssetBaseDescribe, kn) {
						currentKey = ffjtNHAssetBaseDescribe
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffjKeyNHAssetChild, kn) {
						currentKey = ffjtNHAssetChild
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyNHAssetCreateTime, kn) {
						currentKey = ffjtNHAssetCreateTime
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffjKeyNHAssetDealership, kn) {
						currentKey = ffjtNHAssetDealership
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyNHAssetID, kn) {
						currentKey = ffjtNHAssetID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffjKeyNHAssetLimitList, kn) {
						currentKey = ffjtNHAssetLimitList
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffjKeyNHAssetNhAssetCreator, kn) {
						currentKey = ffjtNHAssetNhAssetCreator
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyNHAssetNhAssetOwner, kn) {
						currentKey = ffjtNHAssetNhAssetOwner
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyNHAssetNhAssetActive, kn) {
						currentKey = ffjtNHAssetNhAssetActive
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyNHAssetParent, kn) {
						currentKey = ffjtNHAssetParent
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'w':

					if bytes.Equal(ffjKeyNHAssetWorldView, kn) {
						currentKey = ffjtNHAssetWorldView
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyNHAssetLimitList, kn) {
					currentKey = ffjtNHAssetLimitList
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyNHAssetCreateTime, kn) {
					currentKey = ffjtNHAssetCreateTime
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyNHAssetChild, kn) {
					currentKey = ffjtNHAssetChild
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyNHAssetParent, kn) {
					currentKey = ffjtNHAssetParent
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyNHAssetBaseDescribe, kn) {
					currentKey = ffjtNHAssetBaseDescribe
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyNHAssetWorldView, kn) {
					currentKey = ffjtNHAssetWorldView
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyNHAssetAssetQualifier, kn) {
					currentKey = ffjtNHAssetAssetQualifier
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyNHAssetDealership, kn) {
					currentKey = ffjtNHAssetDealership
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyNHAssetNhAssetActive, kn) {
					currentKey = ffjtNHAssetNhAssetActive
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyNHAssetNhAssetOwner, kn) {
					currentKey = ffjtNHAssetNhAssetOwner
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyNHAssetNhAssetCreator, kn) {
					currentKey = ffjtNHAssetNhAssetCreator
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyNHAssetID, kn) {
					currentKey = ffjtNHAssetID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtNHAssetnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtNHAssetID:
					goto handle_ID

				case ffjtNHAssetNhAssetCreator:
					goto handle_NhAssetCreator

				case ffjtNHAssetNhAssetOwner:
					goto handle_NhAssetOwner

				case ffjtNHAssetNhAssetActive:
					goto handle_NhAssetActive

				case ffjtNHAssetDealership:
					goto handle_Dealership

				case ffjtNHAssetAssetQualifier:
					goto handle_AssetQualifier

				case ffjtNHAssetWorldView:
					goto handle_WorldView

				case ffjtNHAssetBaseDescribe:
					goto handle_BaseDescribe

				case ffjtNHAssetParent:
					goto handle_Parent

				case ffjtNHAssetChild:
					goto handle_Child

				case ffjtNHAssetCreateTime:
					goto handle_CreateTime

				case ffjtNHAssetLimitList:
					goto handle_LimitList

				case ffjtNHAssetnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ID:

	/* handler: j.ID type=types.NHAssetID kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.ID.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_NhAssetCreator:

	/* handler: j.NhAssetCreator type=types.AccountID kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.NhAssetCreator.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_NhAssetOwner:

	/* handler: j.NhAssetOwner type=types.AccountID kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.NhAssetOwner.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_NhAssetActive:

	/* handler: j.NhAssetActive type=types.AccountID kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.NhAssetActive.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Dealership:

	/* handler: j.Dealership type=types.AccountID kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.Dealership.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AssetQualifier:

	/* handler: j.AssetQualifier type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.AssetQualifier = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_WorldView:

	/* handler: j.WorldView type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.WorldView = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BaseDescribe:

	/* handler: j.BaseDescribe type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.BaseDescribe = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Parent:

	/* handler: j.Parent type=types.NHAssetMapType kind=map quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_bracket && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for NHAssetMapType", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Parent = nil
		} else {

			j.Parent = make(map[ContractID]NHAssetIDListType, 0)

			wantVal := true

			for {

				var k ContractID

				var tmpJParent NHAssetIDListType

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_bracket {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: k type=types.ContractID kind=struct quoted=false*/

				{
					if tok == fflib.FFTok_null {

					} else {

						tbuf, err := fs.CaptureField(tok)
						if err != nil {
							return fs.WrapErr(err)
						}

						err = k.UnmarshalJSON(tbuf)
						if err != nil {
							return fs.WrapErr(err)
						}
					}
					state = fflib.FFParse_after_value
				}

				// Expect ':' after key
				tok = fs.Scan()
				if tok != fflib.FFTok_colon {
					return fs.WrapErr(fmt.Errorf("wanted colon token, but got token: %v", tok))
				}

				tok = fs.Scan()
				/* handler: tmpJParent type=types.NHAssetIDListType kind=slice quoted=false*/

				{

					{
						if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for NHAssetIDListType", tok))
						}
					}

					if tok == fflib.FFTok_null {
						tmpJParent = nil
					} else {

						tmpJParent = []NHAssetID{}

						wantVal := true

						for {

							var tmpTmpJParent NHAssetID

							tok = fs.Scan()
							if tok == fflib.FFTok_error {
								goto tokerror
							}
							if tok == fflib.FFTok_right_brace {
								break
							}

							if tok == fflib.FFTok_comma {
								if wantVal == true {
									// TODO(pquerna): this isn't an ideal error message, this handles
									// things like [,,,] as an array value.
									return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
								}
								continue
							} else {
								wantVal = true
							}

							/* handler: tmpTmpJParent type=types.NHAssetID kind=struct quoted=false*/

							{
								if tok == fflib.FFTok_null {

								} else {

									tbuf, err := fs.CaptureField(tok)
									if err != nil {
										return fs.WrapErr(err)
									}

									err = tmpTmpJParent.UnmarshalJSON(tbuf)
									if err != nil {
										return fs.WrapErr(err)
									}
								}
								state = fflib.FFParse_after_value
							}

							tmpJParent = append(tmpJParent, tmpTmpJParent)

							wantVal = false
						}
					}
				}

				j.Parent[k] = tmpJParent

				wantVal = false
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Child:

	/* handler: j.Child type=types.NHAssetMapType kind=map quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_bracket && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for NHAssetMapType", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Child = nil
		} else {

			j.Child = make(map[ContractID]NHAssetIDListType, 0)

			wantVal := true

			for {

				var k ContractID

				var tmpJChild NHAssetIDListType

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_bracket {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: k type=types.ContractID kind=struct quoted=false*/

				{
					if tok == fflib.FFTok_null {

					} else {

						tbuf, err := fs.CaptureField(tok)
						if err != nil {
							return fs.WrapErr(err)
						}

						err = k.UnmarshalJSON(tbuf)
						if err != nil {
							return fs.WrapErr(err)
						}
					}
					state = fflib.FFParse_after_value
				}

				// Expect ':' after key
				tok = fs.Scan()
				if tok != fflib.FFTok_colon {
					return fs.WrapErr(fmt.Errorf("wanted colon token, but got token: %v", tok))
				}

				tok = fs.Scan()
				/* handler: tmpJChild type=types.NHAssetIDListType kind=slice quoted=false*/

				{

					{
						if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for NHAssetIDListType", tok))
						}
					}

					if tok == fflib.FFTok_null {
						tmpJChild = nil
					} else {

						tmpJChild = []NHAssetID{}

						wantVal := true

						for {

							var tmpTmpJChild NHAssetID

							tok = fs.Scan()
							if tok == fflib.FFTok_error {
								goto tokerror
							}
							if tok == fflib.FFTok_right_brace {
								break
							}

							if tok == fflib.FFTok_comma {
								if wantVal == true {
									// TODO(pquerna): this isn't an ideal error message, this handles
									// things like [,,,] as an array value.
									return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
								}
								continue
							} else {
								wantVal = true
							}

							/* handler: tmpTmpJChild type=types.NHAssetID kind=struct quoted=false*/

							{
								if tok == fflib.FFTok_null {

								} else {

									tbuf, err := fs.CaptureField(tok)
									if err != nil {
										return fs.WrapErr(err)
									}

									err = tmpTmpJChild.UnmarshalJSON(tbuf)
									if err != nil {
										return fs.WrapErr(err)
									}
								}
								state = fflib.FFParse_after_value
							}

							tmpJChild = append(tmpJChild, tmpTmpJChild)

							wantVal = false
						}
					}
				}

				j.Child[k] = tmpJChild

				wantVal = false
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CreateTime:

	/* handler: j.CreateTime type=types.Time kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.CreateTime.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LimitList:

	/* handler: j.LimitList type=types.ContractIDListType kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ContractIDListType", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.LimitList = nil
		} else {

			j.LimitList = []ContractID{}

			wantVal := true

			for {

				var tmpJLimitList ContractID

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJLimitList type=types.ContractID kind=struct quoted=false*/

				{
					if tok == fflib.FFTok_null {

					} else {

						tbuf, err := fs.CaptureField(tok)
						if err != nil {
							return fs.WrapErr(err)
						}

						err = tmpJLimitList.UnmarshalJSON(tbuf)
						if err != nil {
							return fs.WrapErr(err)
						}
					}
					state = fflib.FFParse_after_value
				}

				j.LimitList = append(j.LimitList, tmpJLimitList)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
