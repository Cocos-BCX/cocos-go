// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: network.go

package types

import (
	"bytes"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *NetWorkPeer) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *NetWorkPeer) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"version":`)
	fflib.FormatBits2(buf, uint64(j.Version), 10, j.Version < 0)
	buf.WriteString(`,"host":`)
	fflib.WriteJsonString(buf, string(j.Host))
	buf.WriteString(`,"info":`)

	{

		err = j.Info.MarshalJSONBuf(buf)
		if err != nil {
			return err
		}

	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtNetWorkPeerbase = iota
	ffjtNetWorkPeernosuchkey

	ffjtNetWorkPeerVersion

	ffjtNetWorkPeerHost

	ffjtNetWorkPeerInfo
)

var ffjKeyNetWorkPeerVersion = []byte("version")

var ffjKeyNetWorkPeerHost = []byte("host")

var ffjKeyNetWorkPeerInfo = []byte("info")

// UnmarshalJSON umarshall json - template of ffjson
func (j *NetWorkPeer) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *NetWorkPeer) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtNetWorkPeerbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtNetWorkPeernosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'h':

					if bytes.Equal(ffjKeyNetWorkPeerHost, kn) {
						currentKey = ffjtNetWorkPeerHost
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyNetWorkPeerInfo, kn) {
						currentKey = ffjtNetWorkPeerInfo
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffjKeyNetWorkPeerVersion, kn) {
						currentKey = ffjtNetWorkPeerVersion
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyNetWorkPeerInfo, kn) {
					currentKey = ffjtNetWorkPeerInfo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyNetWorkPeerHost, kn) {
					currentKey = ffjtNetWorkPeerHost
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyNetWorkPeerVersion, kn) {
					currentKey = ffjtNetWorkPeerVersion
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtNetWorkPeernosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtNetWorkPeerVersion:
					goto handle_Version

				case ffjtNetWorkPeerHost:
					goto handle_Host

				case ffjtNetWorkPeerInfo:
					goto handle_Info

				case ffjtNetWorkPeernosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Version:

	/* handler: j.Version type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Version = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Host:

	/* handler: j.Host type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Host = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Info:

	/* handler: j.Info type=types.PeerInfo kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			err = j.Info.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
			if err != nil {
				return err
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *PeerInfo) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *PeerInfo) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"addr":`)
	fflib.WriteJsonString(buf, string(j.Addr))
	buf.WriteString(`,"addrlocal":`)
	fflib.WriteJsonString(buf, string(j.AddrLocal))
	buf.WriteString(`,"rpc-port":`)
	fflib.FormatBits2(buf, uint64(j.RPCPort), 10, j.RPCPort < 0)
	buf.WriteString(`,"services":`)
	fflib.FormatBits2(buf, uint64(j.Services), 10, j.Services < 0)
	buf.WriteString(`,"lastsend":`)
	fflib.FormatBits2(buf, uint64(j.LastSend), 10, false)
	buf.WriteString(`,"lastrecv":`)
	fflib.FormatBits2(buf, uint64(j.LastRecv), 10, false)
	buf.WriteString(`,"bytessent":`)
	fflib.FormatBits2(buf, uint64(j.BytesSent), 10, false)
	buf.WriteString(`,"bytesrecv":`)
	fflib.FormatBits2(buf, uint64(j.BytesRecv), 10, false)
	buf.WriteString(`,"conntime":`)

	{

		obj, err = j.Conntime.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"version":`)
	fflib.WriteJsonString(buf, string(j.Version))
	buf.WriteString(`,"subver":`)
	fflib.WriteJsonString(buf, string(j.Subver))
	if j.Inbound {
		buf.WriteString(`,"inbound":true`)
	} else {
		buf.WriteString(`,"inbound":false`)
	}
	buf.WriteString(`,"firewall_status":`)
	fflib.WriteJsonString(buf, string(j.FirewallStatus))
	buf.WriteString(`,"fc_git_revision_sha":`)
	fflib.WriteJsonString(buf, string(j.FCGitRevisionSha))
	buf.WriteString(`,"fc_git_revision_unix_timestamp":`)

	{

		obj, err = j.FCGitRevisionUnixTimestamp.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"fc_git_revision_age":`)
	fflib.WriteJsonString(buf, string(j.FCGitRevisionAge))
	buf.WriteString(`,"platform":`)
	fflib.WriteJsonString(buf, string(j.Platform))
	buf.WriteString(`,"current_head_block":`)
	fflib.WriteJsonString(buf, string(j.CurrentHeadBlock))
	buf.WriteString(`,"current_head_block_number":`)
	fflib.FormatBits2(buf, uint64(j.CurrentHeadBlockNumber), 10, false)
	buf.WriteString(`,"current_head_block_time":`)

	{

		obj, err = j.CurrentHeadBlockTime.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtPeerInfobase = iota
	ffjtPeerInfonosuchkey

	ffjtPeerInfoAddr

	ffjtPeerInfoAddrLocal

	ffjtPeerInfoRPCPort

	ffjtPeerInfoServices

	ffjtPeerInfoLastSend

	ffjtPeerInfoLastRecv

	ffjtPeerInfoBytesSent

	ffjtPeerInfoBytesRecv

	ffjtPeerInfoConntime

	ffjtPeerInfoVersion

	ffjtPeerInfoSubver

	ffjtPeerInfoInbound

	ffjtPeerInfoFirewallStatus

	ffjtPeerInfoFCGitRevisionSha

	ffjtPeerInfoFCGitRevisionUnixTimestamp

	ffjtPeerInfoFCGitRevisionAge

	ffjtPeerInfoPlatform

	ffjtPeerInfoCurrentHeadBlock

	ffjtPeerInfoCurrentHeadBlockNumber

	ffjtPeerInfoCurrentHeadBlockTime
)

var ffjKeyPeerInfoAddr = []byte("addr")

var ffjKeyPeerInfoAddrLocal = []byte("addrlocal")

var ffjKeyPeerInfoRPCPort = []byte("rpc-port")

var ffjKeyPeerInfoServices = []byte("services")

var ffjKeyPeerInfoLastSend = []byte("lastsend")

var ffjKeyPeerInfoLastRecv = []byte("lastrecv")

var ffjKeyPeerInfoBytesSent = []byte("bytessent")

var ffjKeyPeerInfoBytesRecv = []byte("bytesrecv")

var ffjKeyPeerInfoConntime = []byte("conntime")

var ffjKeyPeerInfoVersion = []byte("version")

var ffjKeyPeerInfoSubver = []byte("subver")

var ffjKeyPeerInfoInbound = []byte("inbound")

var ffjKeyPeerInfoFirewallStatus = []byte("firewall_status")

var ffjKeyPeerInfoFCGitRevisionSha = []byte("fc_git_revision_sha")

var ffjKeyPeerInfoFCGitRevisionUnixTimestamp = []byte("fc_git_revision_unix_timestamp")

var ffjKeyPeerInfoFCGitRevisionAge = []byte("fc_git_revision_age")

var ffjKeyPeerInfoPlatform = []byte("platform")

var ffjKeyPeerInfoCurrentHeadBlock = []byte("current_head_block")

var ffjKeyPeerInfoCurrentHeadBlockNumber = []byte("current_head_block_number")

var ffjKeyPeerInfoCurrentHeadBlockTime = []byte("current_head_block_time")

// UnmarshalJSON umarshall json - template of ffjson
func (j *PeerInfo) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *PeerInfo) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtPeerInfobase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtPeerInfonosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyPeerInfoAddr, kn) {
						currentKey = ffjtPeerInfoAddr
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPeerInfoAddrLocal, kn) {
						currentKey = ffjtPeerInfoAddrLocal
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'b':

					if bytes.Equal(ffjKeyPeerInfoBytesSent, kn) {
						currentKey = ffjtPeerInfoBytesSent
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPeerInfoBytesRecv, kn) {
						currentKey = ffjtPeerInfoBytesRecv
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffjKeyPeerInfoConntime, kn) {
						currentKey = ffjtPeerInfoConntime
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPeerInfoCurrentHeadBlock, kn) {
						currentKey = ffjtPeerInfoCurrentHeadBlock
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPeerInfoCurrentHeadBlockNumber, kn) {
						currentKey = ffjtPeerInfoCurrentHeadBlockNumber
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPeerInfoCurrentHeadBlockTime, kn) {
						currentKey = ffjtPeerInfoCurrentHeadBlockTime
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffjKeyPeerInfoFirewallStatus, kn) {
						currentKey = ffjtPeerInfoFirewallStatus
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPeerInfoFCGitRevisionSha, kn) {
						currentKey = ffjtPeerInfoFCGitRevisionSha
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPeerInfoFCGitRevisionUnixTimestamp, kn) {
						currentKey = ffjtPeerInfoFCGitRevisionUnixTimestamp
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPeerInfoFCGitRevisionAge, kn) {
						currentKey = ffjtPeerInfoFCGitRevisionAge
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyPeerInfoInbound, kn) {
						currentKey = ffjtPeerInfoInbound
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffjKeyPeerInfoLastSend, kn) {
						currentKey = ffjtPeerInfoLastSend
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPeerInfoLastRecv, kn) {
						currentKey = ffjtPeerInfoLastRecv
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyPeerInfoPlatform, kn) {
						currentKey = ffjtPeerInfoPlatform
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffjKeyPeerInfoRPCPort, kn) {
						currentKey = ffjtPeerInfoRPCPort
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyPeerInfoServices, kn) {
						currentKey = ffjtPeerInfoServices
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyPeerInfoSubver, kn) {
						currentKey = ffjtPeerInfoSubver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffjKeyPeerInfoVersion, kn) {
						currentKey = ffjtPeerInfoVersion
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyPeerInfoCurrentHeadBlockTime, kn) {
					currentKey = ffjtPeerInfoCurrentHeadBlockTime
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPeerInfoCurrentHeadBlockNumber, kn) {
					currentKey = ffjtPeerInfoCurrentHeadBlockNumber
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPeerInfoCurrentHeadBlock, kn) {
					currentKey = ffjtPeerInfoCurrentHeadBlock
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPeerInfoPlatform, kn) {
					currentKey = ffjtPeerInfoPlatform
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPeerInfoFCGitRevisionAge, kn) {
					currentKey = ffjtPeerInfoFCGitRevisionAge
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPeerInfoFCGitRevisionUnixTimestamp, kn) {
					currentKey = ffjtPeerInfoFCGitRevisionUnixTimestamp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPeerInfoFCGitRevisionSha, kn) {
					currentKey = ffjtPeerInfoFCGitRevisionSha
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPeerInfoFirewallStatus, kn) {
					currentKey = ffjtPeerInfoFirewallStatus
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPeerInfoInbound, kn) {
					currentKey = ffjtPeerInfoInbound
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPeerInfoSubver, kn) {
					currentKey = ffjtPeerInfoSubver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPeerInfoVersion, kn) {
					currentKey = ffjtPeerInfoVersion
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPeerInfoConntime, kn) {
					currentKey = ffjtPeerInfoConntime
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPeerInfoBytesRecv, kn) {
					currentKey = ffjtPeerInfoBytesRecv
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPeerInfoBytesSent, kn) {
					currentKey = ffjtPeerInfoBytesSent
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPeerInfoLastRecv, kn) {
					currentKey = ffjtPeerInfoLastRecv
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPeerInfoLastSend, kn) {
					currentKey = ffjtPeerInfoLastSend
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPeerInfoServices, kn) {
					currentKey = ffjtPeerInfoServices
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyPeerInfoRPCPort, kn) {
					currentKey = ffjtPeerInfoRPCPort
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPeerInfoAddrLocal, kn) {
					currentKey = ffjtPeerInfoAddrLocal
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyPeerInfoAddr, kn) {
					currentKey = ffjtPeerInfoAddr
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtPeerInfonosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtPeerInfoAddr:
					goto handle_Addr

				case ffjtPeerInfoAddrLocal:
					goto handle_AddrLocal

				case ffjtPeerInfoRPCPort:
					goto handle_RPCPort

				case ffjtPeerInfoServices:
					goto handle_Services

				case ffjtPeerInfoLastSend:
					goto handle_LastSend

				case ffjtPeerInfoLastRecv:
					goto handle_LastRecv

				case ffjtPeerInfoBytesSent:
					goto handle_BytesSent

				case ffjtPeerInfoBytesRecv:
					goto handle_BytesRecv

				case ffjtPeerInfoConntime:
					goto handle_Conntime

				case ffjtPeerInfoVersion:
					goto handle_Version

				case ffjtPeerInfoSubver:
					goto handle_Subver

				case ffjtPeerInfoInbound:
					goto handle_Inbound

				case ffjtPeerInfoFirewallStatus:
					goto handle_FirewallStatus

				case ffjtPeerInfoFCGitRevisionSha:
					goto handle_FCGitRevisionSha

				case ffjtPeerInfoFCGitRevisionUnixTimestamp:
					goto handle_FCGitRevisionUnixTimestamp

				case ffjtPeerInfoFCGitRevisionAge:
					goto handle_FCGitRevisionAge

				case ffjtPeerInfoPlatform:
					goto handle_Platform

				case ffjtPeerInfoCurrentHeadBlock:
					goto handle_CurrentHeadBlock

				case ffjtPeerInfoCurrentHeadBlockNumber:
					goto handle_CurrentHeadBlockNumber

				case ffjtPeerInfoCurrentHeadBlockTime:
					goto handle_CurrentHeadBlockTime

				case ffjtPeerInfonosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Addr:

	/* handler: j.Addr type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Addr = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AddrLocal:

	/* handler: j.AddrLocal type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.AddrLocal = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RPCPort:

	/* handler: j.RPCPort type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.RPCPort = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Services:

	/* handler: j.Services type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Services = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LastSend:

	/* handler: j.LastSend type=uint64 kind=uint64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.LastSend = uint64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LastRecv:

	/* handler: j.LastRecv type=uint64 kind=uint64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.LastRecv = uint64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BytesSent:

	/* handler: j.BytesSent type=uint64 kind=uint64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.BytesSent = uint64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BytesRecv:

	/* handler: j.BytesRecv type=uint64 kind=uint64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.BytesRecv = uint64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Conntime:

	/* handler: j.Conntime type=types.Time kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.Conntime.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Version:

	/* handler: j.Version type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Version = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Subver:

	/* handler: j.Subver type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Subver = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Inbound:

	/* handler: j.Inbound type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.Inbound = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.Inbound = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FirewallStatus:

	/* handler: j.FirewallStatus type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.FirewallStatus = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FCGitRevisionSha:

	/* handler: j.FCGitRevisionSha type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.FCGitRevisionSha = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FCGitRevisionUnixTimestamp:

	/* handler: j.FCGitRevisionUnixTimestamp type=types.Time kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.FCGitRevisionUnixTimestamp.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FCGitRevisionAge:

	/* handler: j.FCGitRevisionAge type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.FCGitRevisionAge = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Platform:

	/* handler: j.Platform type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Platform = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CurrentHeadBlock:

	/* handler: j.CurrentHeadBlock type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CurrentHeadBlock = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CurrentHeadBlockNumber:

	/* handler: j.CurrentHeadBlockNumber type=uint64 kind=uint64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.CurrentHeadBlockNumber = uint64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CurrentHeadBlockTime:

	/* handler: j.CurrentHeadBlockTime type=types.Time kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.CurrentHeadBlockTime.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
