// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: updateglobalpropertyextensionsoperation.go

package operations

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *UpdateGlobalPropertyExtensionsOperation) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *UpdateGlobalPropertyExtensionsOperation) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "witness_max_votes":`)
	fflib.FormatBits2(buf, uint64(j.WitnessMaxVotes), 10, false)
	buf.WriteString(`,"committee_max_votes":`)
	fflib.FormatBits2(buf, uint64(j.CommitteeMaxVotes), 10, false)
	buf.WriteString(`,"contract_private_data_size":`)
	fflib.FormatBits2(buf, uint64(j.ContractPrivateDataSize), 10, false)
	buf.WriteString(`,"contract_total_data_size":`)
	fflib.FormatBits2(buf, uint64(j.ContractTotalDataSize), 10, false)
	buf.WriteString(`,"contract_max_data_size":`)
	fflib.FormatBits2(buf, uint64(j.ContractMaxDataSize), 10, false)
	buf.WriteByte(',')
	if j.Fee != nil {
		if true {
			/* Struct fall back. type=types.AssetAmount kind=struct */
			buf.WriteString(`"fee":`)
			err = buf.Encode(j.Fee)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtUpdateGlobalPropertyExtensionsOperationbase = iota
	ffjtUpdateGlobalPropertyExtensionsOperationnosuchkey

	ffjtUpdateGlobalPropertyExtensionsOperationWitnessMaxVotes

	ffjtUpdateGlobalPropertyExtensionsOperationCommitteeMaxVotes

	ffjtUpdateGlobalPropertyExtensionsOperationContractPrivateDataSize

	ffjtUpdateGlobalPropertyExtensionsOperationContractTotalDataSize

	ffjtUpdateGlobalPropertyExtensionsOperationContractMaxDataSize

	ffjtUpdateGlobalPropertyExtensionsOperationFee
)

var ffjKeyUpdateGlobalPropertyExtensionsOperationWitnessMaxVotes = []byte("witness_max_votes")

var ffjKeyUpdateGlobalPropertyExtensionsOperationCommitteeMaxVotes = []byte("committee_max_votes")

var ffjKeyUpdateGlobalPropertyExtensionsOperationContractPrivateDataSize = []byte("contract_private_data_size")

var ffjKeyUpdateGlobalPropertyExtensionsOperationContractTotalDataSize = []byte("contract_total_data_size")

var ffjKeyUpdateGlobalPropertyExtensionsOperationContractMaxDataSize = []byte("contract_max_data_size")

var ffjKeyUpdateGlobalPropertyExtensionsOperationFee = []byte("fee")

// UnmarshalJSON umarshall json - template of ffjson
func (j *UpdateGlobalPropertyExtensionsOperation) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *UpdateGlobalPropertyExtensionsOperation) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtUpdateGlobalPropertyExtensionsOperationbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtUpdateGlobalPropertyExtensionsOperationnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeyUpdateGlobalPropertyExtensionsOperationCommitteeMaxVotes, kn) {
						currentKey = ffjtUpdateGlobalPropertyExtensionsOperationCommitteeMaxVotes
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyUpdateGlobalPropertyExtensionsOperationContractPrivateDataSize, kn) {
						currentKey = ffjtUpdateGlobalPropertyExtensionsOperationContractPrivateDataSize
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyUpdateGlobalPropertyExtensionsOperationContractTotalDataSize, kn) {
						currentKey = ffjtUpdateGlobalPropertyExtensionsOperationContractTotalDataSize
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyUpdateGlobalPropertyExtensionsOperationContractMaxDataSize, kn) {
						currentKey = ffjtUpdateGlobalPropertyExtensionsOperationContractMaxDataSize
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffjKeyUpdateGlobalPropertyExtensionsOperationFee, kn) {
						currentKey = ffjtUpdateGlobalPropertyExtensionsOperationFee
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'w':

					if bytes.Equal(ffjKeyUpdateGlobalPropertyExtensionsOperationWitnessMaxVotes, kn) {
						currentKey = ffjtUpdateGlobalPropertyExtensionsOperationWitnessMaxVotes
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyUpdateGlobalPropertyExtensionsOperationFee, kn) {
					currentKey = ffjtUpdateGlobalPropertyExtensionsOperationFee
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyUpdateGlobalPropertyExtensionsOperationContractMaxDataSize, kn) {
					currentKey = ffjtUpdateGlobalPropertyExtensionsOperationContractMaxDataSize
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyUpdateGlobalPropertyExtensionsOperationContractTotalDataSize, kn) {
					currentKey = ffjtUpdateGlobalPropertyExtensionsOperationContractTotalDataSize
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyUpdateGlobalPropertyExtensionsOperationContractPrivateDataSize, kn) {
					currentKey = ffjtUpdateGlobalPropertyExtensionsOperationContractPrivateDataSize
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyUpdateGlobalPropertyExtensionsOperationCommitteeMaxVotes, kn) {
					currentKey = ffjtUpdateGlobalPropertyExtensionsOperationCommitteeMaxVotes
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyUpdateGlobalPropertyExtensionsOperationWitnessMaxVotes, kn) {
					currentKey = ffjtUpdateGlobalPropertyExtensionsOperationWitnessMaxVotes
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtUpdateGlobalPropertyExtensionsOperationnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtUpdateGlobalPropertyExtensionsOperationWitnessMaxVotes:
					goto handle_WitnessMaxVotes

				case ffjtUpdateGlobalPropertyExtensionsOperationCommitteeMaxVotes:
					goto handle_CommitteeMaxVotes

				case ffjtUpdateGlobalPropertyExtensionsOperationContractPrivateDataSize:
					goto handle_ContractPrivateDataSize

				case ffjtUpdateGlobalPropertyExtensionsOperationContractTotalDataSize:
					goto handle_ContractTotalDataSize

				case ffjtUpdateGlobalPropertyExtensionsOperationContractMaxDataSize:
					goto handle_ContractMaxDataSize

				case ffjtUpdateGlobalPropertyExtensionsOperationFee:
					goto handle_Fee

				case ffjtUpdateGlobalPropertyExtensionsOperationnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_WitnessMaxVotes:

	/* handler: j.WitnessMaxVotes type=types.UInt16 kind=uint16 quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.WitnessMaxVotes.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CommitteeMaxVotes:

	/* handler: j.CommitteeMaxVotes type=types.UInt16 kind=uint16 quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.CommitteeMaxVotes.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ContractPrivateDataSize:

	/* handler: j.ContractPrivateDataSize type=types.UInt64 kind=uint64 quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.ContractPrivateDataSize.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ContractTotalDataSize:

	/* handler: j.ContractTotalDataSize type=types.UInt64 kind=uint64 quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.ContractTotalDataSize.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ContractMaxDataSize:

	/* handler: j.ContractMaxDataSize type=types.UInt64 kind=uint64 quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.ContractMaxDataSize.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Fee:

	/* handler: j.Fee type=types.AssetAmount kind=struct quoted=false*/

	{
		/* Falling back. type=types.AssetAmount kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Fee)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
