// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: aboutinfo.go

package objects

import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *AboutInfo) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *AboutInfo) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"client_version":`)
	fflib.WriteJsonString(buf, string(j.ClientVersion))
	buf.WriteString(`,"graphene_revision":`)
	fflib.WriteJsonString(buf, string(j.GrapheneRevision))
	buf.WriteString(`,"fc_revision":`)
	fflib.WriteJsonString(buf, string(j.FCRevision))
	buf.WriteString(`,"compile_date":`)
	fflib.WriteJsonString(buf, string(j.CompileDate))
	buf.WriteString(`,"openssl_version":`)
	fflib.WriteJsonString(buf, string(j.OpenSSLVersion))
	buf.WriteString(`,"graphene_revision_age":`)
	fflib.WriteJsonString(buf, string(j.GrapheneRevisionAge))
	buf.WriteString(`,"fc_revision_age":`)
	fflib.WriteJsonString(buf, string(j.FCRevisionAge))
	buf.WriteString(`,"boost_version":`)
	fflib.WriteJsonString(buf, string(j.BoostVersion))
	buf.WriteString(`,"build":`)
	fflib.WriteJsonString(buf, string(j.Build))
	buf.WriteByte('}')
	return nil
}

const (
	ffjtAboutInfobase = iota
	ffjtAboutInfonosuchkey

	ffjtAboutInfoClientVersion

	ffjtAboutInfoGrapheneRevision

	ffjtAboutInfoFCRevision

	ffjtAboutInfoCompileDate

	ffjtAboutInfoOpenSSLVersion

	ffjtAboutInfoGrapheneRevisionAge

	ffjtAboutInfoFCRevisionAge

	ffjtAboutInfoBoostVersion

	ffjtAboutInfoBuild
)

var ffjKeyAboutInfoClientVersion = []byte("client_version")

var ffjKeyAboutInfoGrapheneRevision = []byte("graphene_revision")

var ffjKeyAboutInfoFCRevision = []byte("fc_revision")

var ffjKeyAboutInfoCompileDate = []byte("compile_date")

var ffjKeyAboutInfoOpenSSLVersion = []byte("openssl_version")

var ffjKeyAboutInfoGrapheneRevisionAge = []byte("graphene_revision_age")

var ffjKeyAboutInfoFCRevisionAge = []byte("fc_revision_age")

var ffjKeyAboutInfoBoostVersion = []byte("boost_version")

var ffjKeyAboutInfoBuild = []byte("build")

// UnmarshalJSON umarshall json - template of ffjson
func (j *AboutInfo) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *AboutInfo) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtAboutInfobase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtAboutInfonosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'b':

					if bytes.Equal(ffjKeyAboutInfoBoostVersion, kn) {
						currentKey = ffjtAboutInfoBoostVersion
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyAboutInfoBuild, kn) {
						currentKey = ffjtAboutInfoBuild
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffjKeyAboutInfoClientVersion, kn) {
						currentKey = ffjtAboutInfoClientVersion
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyAboutInfoCompileDate, kn) {
						currentKey = ffjtAboutInfoCompileDate
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffjKeyAboutInfoFCRevision, kn) {
						currentKey = ffjtAboutInfoFCRevision
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyAboutInfoFCRevisionAge, kn) {
						currentKey = ffjtAboutInfoFCRevisionAge
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'g':

					if bytes.Equal(ffjKeyAboutInfoGrapheneRevision, kn) {
						currentKey = ffjtAboutInfoGrapheneRevision
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyAboutInfoGrapheneRevisionAge, kn) {
						currentKey = ffjtAboutInfoGrapheneRevisionAge
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffjKeyAboutInfoOpenSSLVersion, kn) {
						currentKey = ffjtAboutInfoOpenSSLVersion
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyAboutInfoBuild, kn) {
					currentKey = ffjtAboutInfoBuild
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAboutInfoBoostVersion, kn) {
					currentKey = ffjtAboutInfoBoostVersion
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAboutInfoFCRevisionAge, kn) {
					currentKey = ffjtAboutInfoFCRevisionAge
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAboutInfoGrapheneRevisionAge, kn) {
					currentKey = ffjtAboutInfoGrapheneRevisionAge
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAboutInfoOpenSSLVersion, kn) {
					currentKey = ffjtAboutInfoOpenSSLVersion
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyAboutInfoCompileDate, kn) {
					currentKey = ffjtAboutInfoCompileDate
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAboutInfoFCRevision, kn) {
					currentKey = ffjtAboutInfoFCRevision
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAboutInfoGrapheneRevision, kn) {
					currentKey = ffjtAboutInfoGrapheneRevision
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAboutInfoClientVersion, kn) {
					currentKey = ffjtAboutInfoClientVersion
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtAboutInfonosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtAboutInfoClientVersion:
					goto handle_ClientVersion

				case ffjtAboutInfoGrapheneRevision:
					goto handle_GrapheneRevision

				case ffjtAboutInfoFCRevision:
					goto handle_FCRevision

				case ffjtAboutInfoCompileDate:
					goto handle_CompileDate

				case ffjtAboutInfoOpenSSLVersion:
					goto handle_OpenSSLVersion

				case ffjtAboutInfoGrapheneRevisionAge:
					goto handle_GrapheneRevisionAge

				case ffjtAboutInfoFCRevisionAge:
					goto handle_FCRevisionAge

				case ffjtAboutInfoBoostVersion:
					goto handle_BoostVersion

				case ffjtAboutInfoBuild:
					goto handle_Build

				case ffjtAboutInfonosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ClientVersion:

	/* handler: j.ClientVersion type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ClientVersion = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_GrapheneRevision:

	/* handler: j.GrapheneRevision type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.GrapheneRevision = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FCRevision:

	/* handler: j.FCRevision type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.FCRevision = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CompileDate:

	/* handler: j.CompileDate type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CompileDate = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OpenSSLVersion:

	/* handler: j.OpenSSLVersion type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.OpenSSLVersion = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_GrapheneRevisionAge:

	/* handler: j.GrapheneRevisionAge type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.GrapheneRevisionAge = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FCRevisionAge:

	/* handler: j.FCRevisionAge type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.FCRevisionAge = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BoostVersion:

	/* handler: j.BoostVersion type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.BoostVersion = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Build:

	/* handler: j.Build type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Build = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
