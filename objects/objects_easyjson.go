// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package objects

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCce3d1beDecodeGithubComDenkhausbitsharesObjects(in *jlexer.Lexer, out *UserAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "statistics":
			out.Statistics = string(in.String())
		case "membership_expiration_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MembershipExpirationDate).UnmarshalJSON(data))
			}
		case "network_fee_percentage":
			out.NetworkFeePercentage = int64(in.Int64())
		case "lifetime_referrer_fee_percentage":
			out.LifetimeReferrerFeePercentage = int64(in.Int64())
		case "referrer_rewards_percentage":
			out.ReferrerRewardsPercentage = int64(in.Int64())
		case "top_n_control_flags":
			out.TopNControlFlags = int64(in.Int64())
		case "whitelisting_accounts":
			if in.IsNull() {
				in.Skip()
				out.WhitelistingAccounts = nil
			} else {
				in.Delim('[')
				if out.WhitelistingAccounts == nil {
					if !in.IsDelim(']') {
						out.WhitelistingAccounts = make([]string, 0, 4)
					} else {
						out.WhitelistingAccounts = []string{}
					}
				} else {
					out.WhitelistingAccounts = (out.WhitelistingAccounts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.WhitelistingAccounts = append(out.WhitelistingAccounts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blacklisting_accounts":
			if in.IsNull() {
				in.Skip()
				out.BlacklistingAccounts = nil
			} else {
				in.Delim('[')
				if out.BlacklistingAccounts == nil {
					if !in.IsDelim(']') {
						out.BlacklistingAccounts = make([]string, 0, 4)
					} else {
						out.BlacklistingAccounts = []string{}
					}
				} else {
					out.BlacklistingAccounts = (out.BlacklistingAccounts)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.BlacklistingAccounts = append(out.BlacklistingAccounts, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "whitelisted_accounts":
			if in.IsNull() {
				in.Skip()
				out.WhitelistedAccounts = nil
			} else {
				in.Delim('[')
				if out.WhitelistedAccounts == nil {
					if !in.IsDelim(']') {
						out.WhitelistedAccounts = make([]string, 0, 4)
					} else {
						out.WhitelistedAccounts = []string{}
					}
				} else {
					out.WhitelistedAccounts = (out.WhitelistedAccounts)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.WhitelistedAccounts = append(out.WhitelistedAccounts, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blacklisted_accounts":
			if in.IsNull() {
				in.Skip()
				out.BlacklistedAccounts = nil
			} else {
				in.Delim('[')
				if out.BlacklistedAccounts == nil {
					if !in.IsDelim(']') {
						out.BlacklistedAccounts = make([]string, 0, 4)
					} else {
						out.BlacklistedAccounts = []string{}
					}
				} else {
					out.BlacklistedAccounts = (out.BlacklistedAccounts)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.BlacklistedAccounts = append(out.BlacklistedAccounts, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "options":
			(out.Options).UnmarshalEasyJSON(in)
		case "owner":
			(out.Owner).UnmarshalEasyJSON(in)
		case "active":
			(out.Active).UnmarshalEasyJSON(in)
		case "owner_special_authority":
			if in.IsNull() {
				in.Skip()
				out.OwnerSpecialAuthority = nil
			} else {
				in.Delim('[')
				if out.OwnerSpecialAuthority == nil {
					if !in.IsDelim(']') {
						out.OwnerSpecialAuthority = make([]interface{}, 0, 4)
					} else {
						out.OwnerSpecialAuthority = []interface{}{}
					}
				} else {
					out.OwnerSpecialAuthority = (out.OwnerSpecialAuthority)[:0]
				}
				for !in.IsDelim(']') {
					var v5 interface{}
					if m, ok := v5.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v5.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v5 = in.Interface()
					}
					out.OwnerSpecialAuthority = append(out.OwnerSpecialAuthority, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "active_special_authority":
			if in.IsNull() {
				in.Skip()
				out.ActiveSpecialAuthority = nil
			} else {
				in.Delim('[')
				if out.ActiveSpecialAuthority == nil {
					if !in.IsDelim(']') {
						out.ActiveSpecialAuthority = make([]interface{}, 0, 4)
					} else {
						out.ActiveSpecialAuthority = []interface{}{}
					}
				} else {
					out.ActiveSpecialAuthority = (out.ActiveSpecialAuthority)[:0]
				}
				for !in.IsDelim(']') {
					var v6 interface{}
					if m, ok := v6.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v6.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v6 = in.Interface()
					}
					out.ActiveSpecialAuthority = append(out.ActiveSpecialAuthority, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.ID = ObjectID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCce3d1beEncodeGithubComDenkhausbitsharesObjects(out *jwriter.Writer, in UserAccount) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"statistics\":")
	out.String(string(in.Statistics))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"membership_expiration_date\":")
	out.Raw((in.MembershipExpirationDate).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"network_fee_percentage\":")
	out.Int64(int64(in.NetworkFeePercentage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lifetime_referrer_fee_percentage\":")
	out.Int64(int64(in.LifetimeReferrerFeePercentage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"referrer_rewards_percentage\":")
	out.Int64(int64(in.ReferrerRewardsPercentage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"top_n_control_flags\":")
	out.Int64(int64(in.TopNControlFlags))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"whitelisting_accounts\":")
	if in.WhitelistingAccounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v7, v8 := range in.WhitelistingAccounts {
			if v7 > 0 {
				out.RawByte(',')
			}
			out.String(string(v8))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blacklisting_accounts\":")
	if in.BlacklistingAccounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v9, v10 := range in.BlacklistingAccounts {
			if v9 > 0 {
				out.RawByte(',')
			}
			out.String(string(v10))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"whitelisted_accounts\":")
	if in.WhitelistedAccounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in.WhitelistedAccounts {
			if v11 > 0 {
				out.RawByte(',')
			}
			out.String(string(v12))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blacklisted_accounts\":")
	if in.BlacklistedAccounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v13, v14 := range in.BlacklistedAccounts {
			if v13 > 0 {
				out.RawByte(',')
			}
			out.String(string(v14))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"options\":")
	(in.Options).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"owner\":")
	(in.Owner).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"active\":")
	(in.Active).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"owner_special_authority\":")
	if in.OwnerSpecialAuthority == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v15, v16 := range in.OwnerSpecialAuthority {
			if v15 > 0 {
				out.RawByte(',')
			}
			if m, ok := v16.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v16.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v16))
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"active_special_authority\":")
	if in.ActiveSpecialAuthority == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in.ActiveSpecialAuthority {
			if v17 > 0 {
				out.RawByte(',')
			}
			if m, ok := v18.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v18.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v18))
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCce3d1beEncodeGithubComDenkhausbitsharesObjects(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCce3d1beEncodeGithubComDenkhausbitsharesObjects(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCce3d1beDecodeGithubComDenkhausbitsharesObjects(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCce3d1beDecodeGithubComDenkhausbitsharesObjects(l, v)
}
func easyjsonCce3d1beDecodeGithubComDenkhausbitsharesObjects1(in *jlexer.Lexer, out *Authority) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "weight_threshold":
			out.WeightThreshold = int64(in.Int64())
		case "account_auths":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AccountAuths).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCce3d1beEncodeGithubComDenkhausbitsharesObjects1(out *jwriter.Writer, in Authority) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"weight_threshold\":")
	out.Int64(int64(in.WeightThreshold))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"account_auths\":")
	if in.AccountAuths == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v19First := true
		for v19Name, v19Value := range in.AccountAuths {
			if !v19First {
				out.RawByte(',')
			}
			v19First = false
			out.String(string(v19Name))
			out.RawByte(':')
			out.Int64(int64(v19Value))
		}
		out.RawByte('}')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Authority) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCce3d1beEncodeGithubComDenkhausbitsharesObjects1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Authority) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCce3d1beEncodeGithubComDenkhausbitsharesObjects1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Authority) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCce3d1beDecodeGithubComDenkhausbitsharesObjects1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Authority) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCce3d1beDecodeGithubComDenkhausbitsharesObjects1(l, v)
}
func easyjsonCce3d1beDecodeGithubComDenkhausbitsharesObjects2(in *jlexer.Lexer, out *AccountOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "memo_key":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MemoKey).UnmarshalJSON(data))
			}
		case "num_witness":
			out.NumWitness = int(in.Int())
		case "num_comittee":
			out.NumComittee = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCce3d1beEncodeGithubComDenkhausbitsharesObjects2(out *jwriter.Writer, in AccountOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"memo_key\":")
	easyjsonCce3d1beEncodeGithubComDenkhausbitsharesObjects3(out, in.MemoKey)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"num_witness\":")
	out.Int(int(in.NumWitness))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"num_comittee\":")
	out.Int(int(in.NumComittee))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCce3d1beEncodeGithubComDenkhausbitsharesObjects2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCce3d1beEncodeGithubComDenkhausbitsharesObjects2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCce3d1beDecodeGithubComDenkhausbitsharesObjects2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCce3d1beDecodeGithubComDenkhausbitsharesObjects2(l, v)
}
func easyjsonCce3d1beDecodeGithubComDenkhausbitsharesObjects3(in *jlexer.Lexer, out *PublicKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCce3d1beEncodeGithubComDenkhausbitsharesObjects3(out *jwriter.Writer, in PublicKey) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
